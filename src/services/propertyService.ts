// services/propertyService.ts - Updated with hidden/exclusive filtering
import { PropertyFilter } from '../types/property'

const API_BASE_URL = 'https://chance-realty-admin.vercel.app'

export function getCurrentLanguage(): 'hy' | 'en' | 'ru' {
	if (typeof window !== 'undefined') {
		// Check URL path
		const pathParts = window.location.pathname.split('/')
		const urlLang = pathParts[1]
		if (['hy', 'en', 'ru'].includes(urlLang)) {
			return urlLang as 'hy' | 'en' | 'ru'
		}

		// Check localStorage
		const savedLang = localStorage.getItem('preferred-language')
		if (savedLang && ['hy', 'en', 'ru'].includes(savedLang)) {
			return savedLang as 'hy' | 'en' | 'ru'
		}
	}

	return 'hy' // Default to Armenian
}

// Enhanced getProperties with better logging and parameter handling
export async function getProperties(filter: PropertyFilter = {}) {
	try {
		const params = new URLSearchParams()
		const language = getCurrentLanguage()
		params.append('lang', language)

		// Basic filters
		if (filter.property_type)
			params.append('property_type', filter.property_type)
		if (filter.listing_type) params.append('listing_type', filter.listing_type)
		if (filter.state_id) params.append('state_id', filter.state_id.toString())
		if (filter.city_id) params.append('city_id', filter.city_id.toString())
		if (filter.district_id)
			params.append('district_id', filter.district_id.toString())
		if (filter.min_price)
			params.append('min_price', filter.min_price.toString())
		if (filter.max_price)
			params.append('max_price', filter.max_price.toString())

		// Common attributes (house & apartment)
		if (filter.bedrooms) params.append('bedrooms', filter.bedrooms.toString())
		if (filter.bathrooms)
			params.append('bathrooms', filter.bathrooms.toString())

		// Area filters - THIS IS THE KEY PART
		if (filter.min_area_sqft)
			params.append('min_area_sqft', filter.min_area_sqft.toString())
		if (filter.max_area_sqft)
			params.append('max_area_sqft', filter.max_area_sqft.toString())
		if (filter.min_area_acres)
			params.append('min_area_acres', filter.min_area_acres.toString())
		if (filter.max_area_acres)
			params.append('max_area_acres', filter.max_area_acres.toString())

		// House-specific
		if (filter.floors) params.append('floors', filter.floors.toString())
		if (filter.min_lot_size_sqft)
			params.append('min_lot_size_sqft', filter.min_lot_size_sqft.toString())
		if (filter.max_lot_size_sqft)
			params.append('max_lot_size_sqft', filter.max_lot_size_sqft.toString())

		// Apartment-specific
		if (filter.floor) params.append('floor', filter.floor.toString())
		if (filter.total_floors)
			params.append('total_floors', filter.total_floors.toString())

		// Common attribute
		if (filter.ceiling_height)
			params.append('ceiling_height', filter.ceiling_height.toString())

		// Commercial-specific
		if (filter.business_type)
			params.append('business_type', filter.business_type)

		// Features
		if (filter.features && filter.features.length > 0) {
			params.append('features', filter.features.join(','))
		}

		// Sorting and pagination
		if (filter.sort_by) params.append('sort_by', filter.sort_by)
		if (filter.sort_order) params.append('sort_order', filter.sort_order)
		if (filter.page) params.append('page', filter.page.toString())
		if (filter.limit) params.append('limit', filter.limit.toString())

		// Visibility filters
		if (filter.is_exclusive === true) {
			params.append('exclusive', 'true')
		}

		// Set defaults
		if (!filter.page) params.append('page', '1')
		if (!filter.limit) params.append('limit', '50')

		const apiUrl = `${API_BASE_URL}/api/public/properties?${params.toString()}`
		
		// ‚úÖ ADD THIS: Log the full URL to see what's being sent
		console.log('üîç FULL API URL:', apiUrl)
		console.log('üîç FILTER OBJECT:', filter)

		const response = await fetch(apiUrl, {
			method: 'GET',
			headers: {
				Accept: 'application/json',
				'Content-Type': 'application/json',
			},
		})

		if (!response.ok) {
			console.error(`API Error: ${response.status} ${response.statusText}`)
			const errorText = await response.text()
			console.error('Error response:', errorText)
			throw new Error(
				`Failed to fetch properties: ${response.status} ${response.statusText}`
			)
		}

		const data = await response.json()
		console.log('üì¶ Raw API Response:', data)

		let properties = []

		if (Array.isArray(data)) {
			properties = data
		} else if (data && typeof data === 'object') {
			if (Array.isArray(data.properties)) {
				properties = data.properties
			} else if (Array.isArray(data.data)) {
				properties = data.data
			} else if (Array.isArray(data.results)) {
				properties = data.results
			} else if (Array.isArray(data.items)) {
				properties = data.items
			} else {
				console.warn('Unexpected API response format:', data)
				if (data.id || data.custom_id) {
					properties = [data]
				} else {
					properties = []
				}
			}
		} else {
			console.warn('Unexpected API response format:', data)
			properties = []
		}

		// Filter hidden properties
		const visibleProperties = properties.filter(property => {
			// –°–∫—Ä—ã—Ç—ã–µ
			if (property.is_hidden && !filter.show_hidden) return false

			// –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ
			if (filter.is_exclusive === true && property.is_exclusive !== true)
				return false

			// Bedrooms
			if (filter.bedrooms && property.attributes?.bedrooms !== filter.bedrooms)
				return false

			// Bathrooms
			if (
				filter.bathrooms &&
				property.attributes?.bathrooms !== filter.bathrooms
			)
				return false

			// Floors (house & commercial)
			if (filter.floors) {
				if (
					(property.property_type === 'house' ||
						property.property_type === 'commercial') &&
					property.attributes?.floors !== filter.floors
				) {
					return false
				}
			}

			// Floor (apartment)
			if (
				filter.floor &&
				property.property_type === 'apartment' &&
				property.attributes?.floor !== filter.floor
			) {
				return false
			}

			// Total floors (apartment)
			if (
				filter.total_floors &&
				property.property_type === 'apartment' &&
				property.attributes?.total_floors !== filter.total_floors
			) {
				return false
			}

			// Area (sqft)
			if (
				filter.min_area_sqft &&
				property.attributes?.area_sqft < filter.min_area_sqft
			)
				return false
			if (
				filter.max_area_sqft &&
				property.attributes?.area_sqft > filter.max_area_sqft
			)
				return false

			// Lot size (house)
			if (
				filter.min_lot_size_sqft &&
				property.property_type === 'house' &&
				property.attributes?.lot_size_sqft &&
				property.attributes.lot_size_sqft < filter.min_lot_size_sqft
			)
				return false
			if (
				filter.max_lot_size_sqft &&
				property.property_type === 'house' &&
				property.attributes?.lot_size_sqft &&
				property.attributes.lot_size_sqft > filter.max_lot_size_sqft
			)
				return false

			// Area acres (land)
			if (
				filter.min_area_acres &&
				property.property_type === 'land' &&
				property.attributes?.area_acres < filter.min_area_acres
			)
				return false
			if (
				filter.max_area_acres &&
				property.property_type === 'land' &&
				property.attributes?.area_acres > filter.max_area_acres
			)
				return false

			// Ceiling height
			if (
				filter.ceiling_height &&
				property.attributes?.ceiling_height !== filter.ceiling_height
			)
				return false

			// Business type (commercial)
			if (
				filter.business_type &&
				property.property_type === 'commercial' &&
				property.attributes?.business_type !== filter.business_type
			)
				return false

			// Features
			if (filter.features && filter.features.length > 0 && property.features) {
				const hasAllFeatures = filter.features.every(f =>
					property.features?.some(pf => pf.id === f)
				)
				if (!hasAllFeatures) return false
			}

			return true
		})


	
	return visibleProperties

	} catch (error) {
		console.error('Error fetching properties:', error)
		return []
	}
}

export async function getPropertyByCustomId(customId: string) {
	try {
		const language = getCurrentLanguage()
		console.log(
			`‚úÖ Fetching property from PUBLIC endpoint: ${API_BASE_URL}/api/public/properties/${customId}`
		)

		const response = await fetch(
			`${API_BASE_URL}/api/public/properties/${customId}?lang=${language}`
		)

		if (!response.ok) {
			if (response.status === 404) {
				return null
			}
			throw new Error(
				`Failed to fetch property: ${response.status} ${response.statusText}`
			)
		}

		const property = await response.json()

		// ‚úÖ NEW: Additional check for hidden properties
		// The server should handle this, but double-check for safety
		if (property.is_hidden === true) {
			console.warn(`Property ${customId} is hidden, returning null`)
			return null
		}

		return property
	} catch (error) {
		console.error('Error fetching property by custom ID:', error)
		throw error
	}
}

export async function getStates() {
	try {
		const language = getCurrentLanguage()
		console.log('Fetching states...')

		const response = await fetch(
			`${API_BASE_URL}/api/public/properties/states?lang=${language}`,
			{
				method: 'GET',
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
			}
		)

		if (!response.ok) {
			console.error(
				`Failed to fetch states: ${response.status} ${response.statusText}`
			)
			return []
		}

		const states = await response.json()
		console.log('States fetched:', states)
		return Array.isArray(states) ? states : []
	} catch (error) {
		console.error('Error fetching states:', error)
		return []
	}
}

export async function getCitiesByState(stateId: number) {
	try {
		const language = getCurrentLanguage()
		console.log(`Fetching cities for state ${stateId}...`)

		const response = await fetch(
			`${API_BASE_URL}/api/public/properties/cities/${stateId}?lang=${language}`,
			{
				method: 'GET',
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
			}
		)

		if (!response.ok) {
			console.error(
				`Failed to fetch cities: ${response.status} ${response.statusText}`
			)
			return []
		}

		const cities = await response.json()
		console.log('Cities fetched:', cities)
		return Array.isArray(cities) ? cities : []
	} catch (error) {
		console.error('Error fetching cities:', error)
		return []
	}
}

export async function getDistrictsByState(stateId: number) {
	try {
		const language = getCurrentLanguage()
		console.log(`Fetching districts for state ${stateId}...`)

		const response = await fetch(
			`${API_BASE_URL}/api/public/properties/districts/${stateId}?lang=${language}`,
			{
				method: 'GET',
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
			}
		)

		if (!response.ok) {
			console.error(
				`Failed to fetch districts: ${response.status} ${response.statusText}`
			)
			return []
		}

		const districts = await response.json()
		console.log('Districts fetched:', districts)
		return Array.isArray(districts) ? districts : []
	} catch (error) {
		console.error('Error fetching districts:', error)
		return []
	}
}

export async function getPropertyFeatures() {
	try {
		const language = getCurrentLanguage()

		const response = await fetch(
			`${API_BASE_URL}/api/public/properties/features?lang=${language}`
		)

		if (!response.ok) {
			throw new Error(
				`Failed to fetch features: ${response.status} ${response.statusText}`
			)
		}

		const features = await response.json()
		return features
	} catch (error) {
		console.error('Error fetching property features:', error)
		throw error
	}
}

export async function getFeaturedProperties() {
	try {
		const language = getCurrentLanguage()

		console.log('Fetching featured properties...')
		const response = await fetch(
			`${API_BASE_URL}/api/public/properties?featured=true&limit=20&lang=${language}`,
			{
				method: 'GET',
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
			}
		)

		console.log(`Featured properties response status: ${response.status}`)

		if (!response.ok) {
			console.error(
				'Failed to fetch featured properties:',
				response.status,
				response.statusText
			)
			return []
		}

		const data = await response.json()
		console.log('Featured properties raw response:', data)

		let properties = []
		if (Array.isArray(data)) {
			properties = data
		} else if (data && typeof data === 'object') {
			if (Array.isArray(data.properties)) {
				properties = data.properties
			} else if (Array.isArray(data.data)) {
				properties = data.data
			} else if (Array.isArray(data.results)) {
				properties = data.results
			} else {
				console.warn(
					'Unexpected API response format for featured properties:',
					data
				)
				properties = []
			}
		}

		// ‚úÖ NEW: Filter out hidden properties from featured
		const visibleProperties = properties.filter(property => !property.is_hidden)

		console.log(
			`‚úÖ Received ${visibleProperties.length} visible featured properties`
		)
		return visibleProperties
	} catch (error) {
		console.error('Error fetching featured properties:', error)
		return []
	}
}

export async function getRecentProperties(limit: number = 12) {
	try {
		const language = getCurrentLanguage()

		console.log('Fetching recent properties...')
		const response = await fetch(
			`${API_BASE_URL}/api/public/properties?sort_by=created_at&sort_order=desc&limit=${limit}&lang=${language}`,
			{
				method: 'GET',
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
			}
		)

		console.log(`Recent properties response status: ${response.status}`)

		if (!response.ok) {
			console.error(
				'Failed to fetch recent properties:',
				response.status,
				response.statusText
			)
			return []
		}

		const data = await response.json()
		console.log('Recent properties raw response:', data)

		let properties = []
		if (Array.isArray(data)) {
			properties = data
		} else if (data && typeof data === 'object') {
			if (Array.isArray(data.properties)) {
				properties = data.properties
			} else if (Array.isArray(data.data)) {
				properties = data.data
			} else if (Array.isArray(data.results)) {
				properties = data.results
			} else {
				console.warn(
					'Unexpected API response format for recent properties:',
					data
				)
				properties = []
			}
		}

		// ‚úÖ NEW: Filter out hidden properties from recent
		const visibleProperties = properties.filter(property => !property.is_hidden)

		console.log(
			`‚úÖ Received ${visibleProperties.length} visible recent properties`
		)
		return visibleProperties
	} catch (error) {
		console.error('Error fetching recent properties:', error)
		return []
	}
}

// ‚úÖ NEW: Get exclusive properties
export async function getExclusiveProperties(limit: number = 12) {
	try {
		const language = getCurrentLanguage()

		console.log('Fetching exclusive properties...')
		const response = await fetch(
			`${API_BASE_URL}/api/public/properties?exclusive=true&limit=${limit}&lang=${language}`,
			{
				method: 'GET',
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
			}
		)

		console.log(`Exclusive properties response status: ${response.status}`)

		if (!response.ok) {
			console.error(
				'Failed to fetch exclusive properties:',
				response.status,
				response.statusText
			)
			return []
		}

		const data = await response.json()
		console.log('Exclusive properties raw response:', data)

		let properties = []
		if (Array.isArray(data)) {
			properties = data
		} else if (data && typeof data === 'object') {
			if (Array.isArray(data.properties)) {
				properties = data.properties
			} else if (Array.isArray(data.data)) {
				properties = data.data
			} else if (Array.isArray(data.results)) {
				properties = data.results
			} else {
				console.warn(
					'Unexpected API response format for exclusive properties:',
					data
				)
				properties = []
			}
		}

		// ‚úÖ Filter out hidden properties and ensure they're exclusive
		const visibleExclusiveProperties = properties.filter(
			property => !property.is_hidden && property.is_exclusive === true
		)

		console.log(
			`‚úÖ Received ${visibleExclusiveProperties.length} visible exclusive properties`
		)
		return visibleExclusiveProperties
	} catch (error) {
		console.error('Error fetching exclusive properties:', error)
		return []
	}
}

export async function getPropertyStatuses() {
	try {
		const language = getCurrentLanguage()

		const response = await fetch(
			`${API_BASE_URL}/api/public/properties/statuses?lang=${language}`
		)

		if (!response.ok) {
			throw new Error(
				`Failed to fetch statuses: ${response.status} ${response.statusText}`
			)
		}

		const statuses = await response.json()
		return statuses
	} catch (error) {
		console.error('Error fetching property statuses:', error)
		throw error
	}
}

// Keep existing translation helper functions
export function getTranslatedCityName(
	cityName: string,
	language: 'hy' | 'en' | 'ru'
): string {
	const cityTranslations: Record<string, Record<string, string>> = {
‘±’∑’ø’°÷Ä’°’Ø: { hy: '‘±’∑’ø’°÷Ä’°’Ø', en: 'Ashtarak', ru: '–ê—à—Ç–∞—Ä–∞–∫' },
‘±’∫’°÷Ä’°’∂: { hy: '‘±’∫’°÷Ä’°’∂', en: 'Aparan', ru: '–ê–ø–∞—Ä–∞–Ω' },
‘π’°’¨’´’∂: { hy: '‘π’°’¨’´’∂', en: 'Talin', ru: '–¢–∞–ª–∏–Ω' },
‘±÷Ä’ø’°’∑’°’ø: { hy: '‘±÷Ä’ø’°’∑’°’ø', en: 'Artashat', ru: '–ê—Ä—Ç–∞—à–∞—Ç' },
‘±÷Ä’°÷Ä’°’ø: { hy: '‘±÷Ä’°÷Ä’°’ø', en: 'Ararat', ru: '–ê—Ä–∞—Ä–∞—Ç' },
’Ñ’°’Ω’´’Ω: { hy: '’Ñ’°’Ω’´’Ω', en: 'Masis', ru: '–ú–∞—Å–∏—Å' },
‘±÷Ä’¥’°’æ’´÷Ä: { hy: '‘±÷Ä’¥’°’æ’´÷Ä', en: 'Armavir', ru: '–ê—Ä–º–∞–≤–∏—Ä' },
’é’°’≤’°÷Ä’∑’°’∫’°’ø: { hy: '’é’°’≤’°÷Ä’∑’°’∫’°’ø', en: 'Vagharshapat', ru: '–í–∞–≥–∞—Ä—à–∞–ø–∞—Ç' },
‘≥’°’æ’°’º: { hy: '‘≥’°’æ’°’º', en: 'Gavar', ru: '–ì–∞–≤–∞—Ä' },
’ç÷á’°’∂: { hy: '’ç÷á’°’∂', en: 'Sevan', ru: '–°–µ–≤–∞–Ω' },
‘±’¢’∏’æ’µ’°’∂: { hy: '‘±’¢’∏’æ’µ’°’∂', en: 'Abovyan', ru: '–ê–±–æ–≤—è–Ω' },
’Ä÷Ä’°’¶’§’°’∂: { hy: '’Ä÷Ä’°’¶’§’°’∂', en: 'Hrazdan', ru: '–†–∞–∑–¥–∞–Ω' },
’é’•’§’´: { hy: '’é’•’§’´', en: 'Vedi', ru: '–í–µ–¥–∏' },
’é’°÷Ä’§’•’∂’´’Ω: { hy: '’é’°÷Ä’§’•’∂’´’Ω', en: 'Vardenis', ru: '–í–∞—Ä–¥–µ–Ω–∏—Å' },
’Ñ’°÷Ä’ø’∏÷Ç’∂’´: { hy: '’Ñ’°÷Ä’ø’∏÷Ç’∂’´', en: 'Martuni', ru: '–ú–∞—Ä—Ç—É–Ω–∏' },
’â’°÷Ä’•’∂÷Å’°’æ’°’∂: { hy: '’â’°÷Ä’•’∂÷Å’°’æ’°’∂', en: 'Charentsavan', ru: '–ß–∞—Ä–µ–Ω—Ü–∞–≤–∞–Ω' },
’ë’°’≠’Ø’°’±’∏÷Ä: { hy: '’ë’°’≠’Ø’°’±’∏÷Ä', en: 'Tsakhkadzor', ru: '–¶–∞—Ö–∫–∞–¥–∑–æ—Ä' },
’é’°’∂’°’±’∏÷Ä: { hy: '’é’°’∂’°’±’∏÷Ä', en: 'Vanadzor', ru: '–í–∞–Ω–∞–¥–∑–æ—Ä' },
‘±’¨’°’æ’•÷Ä’§’´: { hy: '‘±’¨’°’æ’•÷Ä’§’´', en: 'Alaverdi', ru: '–ê–ª–∞–≤–µ—Ä–¥–∏' },
’ç’ø’•÷É’°’∂’°’æ’°’∂: { hy: '’ç’ø’•÷É’°’∂’°’æ’°’∂', en: 'Stepanavan', ru: '–°—Ç–µ–ø–∞–Ω–∞–≤–∞–Ω' },
‘π’°’∑’´÷Ä: { hy: '‘π’°’∑’´÷Ä', en: 'Tashir', ru: '–¢–∞—à–∏—Ä' },
’ç’∫’´’ø’°’Ø: { hy: '’ç’∫’´’ø’°’Ø', en: 'Spitak', ru: '–°–ø–∏—Ç–∞–∫' },
‘≥’µ’∏÷Ç’¥÷Ä’´: { hy: '‘≥’µ’∏÷Ç’¥÷Ä’´', en: 'Gyumri', ru: '–ì—é–º—Ä–∏' },
‘±÷Ä’©’´’Ø: { hy: '‘±÷Ä’©’´’Ø', en: 'Artik', ru: '–ê—Ä—Ç–∏–∫' },
’Ñ’°÷Ä’°’¨’´’Ø: { hy: '’Ñ’°÷Ä’°’¨’´’Ø', en: 'Maralik', ru: '–ú–∞—Ä–∞–ª–∏–∫' },
‘ø’°’∫’°’∂: { hy: '‘ø’°’∫’°’∂', en: 'Kapan', ru: '–ö–∞–ø–∞–Ω' },
‘≥’∏÷Ä’´’Ω: { hy: '‘≥’∏÷Ä’´’Ω', en: 'Goris', ru: '–ì–æ—Ä–∏—Å' },
’Ñ’•’≤÷Ä’´: { hy: '’Ñ’•’≤÷Ä’´', en: 'Meghri', ru: '–ú–µ–≥—Ä–∏' },
’ç’´’Ω’´’°’∂: { hy: '’ç’´’Ω’´’°’∂', en: 'Sisian', ru: '–°–∏—Å–∏–∞–Ω' },
‘ª’ª÷á’°’∂: { hy: '‘ª’ª÷á’°’∂', en: 'Ijevan', ru: '–ò–¥–∂–µ–≤–∞–Ω' },
‘¥’´’¨’´’ª’°’∂: { hy: '‘¥’´’¨’´’ª’°’∂', en: 'Dilijan', ru: '–î–∏–ª–∏–∂–∞–Ω' },
’Ü’∏’µ’•’¥’¢’•÷Ä’µ’°’∂: { hy: '’Ü’∏’µ’•’¥’¢’•÷Ä’µ’°’∂', en: 'Noyemberyan', ru: '–ù–æ–π–µ–º–±–µ—Ä—è–Ω' },
‘≤’•÷Ä’§: { hy: '‘≤’•÷Ä’§', en: 'Berd', ru: '–ë–µ—Ä–¥' },
‘µ’≤’•’£’∂’°’±’∏÷Ä: { hy: '‘µ’≤’•’£’∂’°’±’∏÷Ä', en: 'Yeghegnadzor', ru: '–ï—Ö–µ–≥–Ω–∞–¥–∑–æ—Ä' },
’é’°’µ÷Ñ: { hy: '’é’°’µ÷Ñ', en: 'Vayk', ru: '–í–∞–π–∫' },
’ã’•÷Ä’¥’∏÷Ç’Ø: { hy: '’ã’•÷Ä’¥’∏÷Ç’Ø', en: 'Jermuk', ru: '–î–∂–µ—Ä–º—É–∫' },
‘µ÷Ä÷á’°’∂: { hy: '‘µ÷Ä÷á’°’∂', en: 'Yerevan', ru: '–ï—Ä–µ–≤–∞–Ω' },
’ä’º’∏’∑’µ’°’∂: { hy: '’ä’º’∏’∑’µ’°’∂', en: 'Proshyan', ru: '–ü—Ä–æ—à—è–Ω' },
‘±’≤’æ’•÷Ä’°’∂: { hy: '‘±’≤’æ’•÷Ä’°’∂', en: 'Aghveran', ru: '–ê–≥–≤–µ—Ä–∞–Ω' },
‘±’Ø’∏÷Ç’∂÷Ñ: { hy: '‘±’Ø’∏÷Ç’∂÷Ñ', en: 'Akunk', ru: '–ê–∫—É–Ω–∫' },
‘±’¨’°÷É’°÷Ä’Ω: { hy: '‘±’¨’°÷É’°÷Ä’Ω', en: 'Alapars', ru: '–ê–ª–∞–ø–∞—Ä—Å' },
‘±÷Ä’°’£’µ’∏÷Ç’≤: { hy: '‘±÷Ä’°’£’µ’∏÷Ç’≤', en: 'Aragyugh', ru: '–ê—Ä–∞–≥—é—Ö' },
‘±÷Ä’°’¥’∏÷Ç’Ω: { hy: '‘±÷Ä’°’¥’∏÷Ç’Ω', en: 'Aramus', ru: '–ê—Ä–∞–º—É—Å' },
‘±÷Ä’£’•’¨: { hy: '‘±÷Ä’£’•’¨', en: 'Argel', ru: '–ê—Ä–≥–µ–ª' },
‘±’º’´’∂’ª: { hy: '‘±’º’´’∂’ª', en: 'Arinj', ru: '–ê—Ä–∏–Ω–∂' },
‘±÷Ä’¶’°’Ø’°’∂: { hy: '‘±÷Ä’¶’°’Ø’°’∂', en: 'Arzakan', ru: '–ê—Ä–∑–∞–∫–∞–Ω' },
‘±÷Ä’¶’∂’´: { hy: '‘±÷Ä’¶’∂’´', en: 'Arzni', ru: '–ê—Ä–∑–Ω–∏' },
‘≤’°’¨’°’∞’∏’æ’´’ø: { hy: '‘≤’°’¨’°’∞’∏’æ’´’ø', en: 'Balahovit', ru: '–ë–∞–ª–∞—Ö–æ–≤–∏—Ç' },
‘≤’ª’∂’´: { hy: '‘≤’ª’∂’´', en: 'Bjni', ru: '–ë–∂–Ω–∏' },
‘≤’µ’∏÷Ç÷Ä’•’≤’°’æ’°’∂: { hy: '‘≤’µ’∏÷Ç÷Ä’•’≤’°’æ’°’∂', en: 'Byureghavan', ru: '–ë—é—Ä–µ—Ö–∞–≤–∞–Ω' },
’Å’∏÷Ä’°’≤’¢’µ’∏÷Ç÷Ä: { hy: '’Å’∏÷Ä’°’≤’¢’µ’∏÷Ç÷Ä', en: 'Dzoraghbyur', ru: '–î–∑–æ—Ä–≥–∞—Ö–±—é—Ä' },
‘≥’°’º’∂’´: { hy: '‘≥’°’º’∂’´', en: 'Garni', ru: '–ì–∞—Ä–Ω–∏' },
‘≥’•’ø’°’¥’•’ª: { hy: '‘≥’•’ø’°’¥’•’ª', en: 'Getamej', ru: '–ì–µ—Ç–∞–º–µ–¥–∂' },
‘≥’∏’≤’©: { hy: '‘≥’∏’≤’©', en: 'Goght', ru: '–ì–æ–≥—Ç' },
’ã÷Ä’æ’•’™: { hy: '’ã÷Ä’æ’•’™', en: 'Jrvezh', ru: '–î–∂—Ä–≤–µ–∂' },
‘ø’°’¥’°÷Ä’´’Ω: { hy: '‘ø’°’¥’°÷Ä’´’Ω', en: 'Kamaris', ru: '–ö–∞–º–∞—Ä–∏—Å' },
’î’°’∂’°÷Ñ’•’º’°’æ’°’∂: { hy: '’î’°’∂’°÷Ñ’•’º’°’æ’°’∂', en: 'Kanakeravan', ru: '–ö–∞–Ω–∞–∫–µ—Ä–∞–≤–∞–Ω' },
’î’°÷Ä’°’∑’°’¥’¢: { hy: '’î’°÷Ä’°’∑’°’¥’¢', en: 'Karashamb', ru: '–ö–∞—Ä–∞—à–∞–º–±' },
’î’°’Ω’°’≠: { hy: '’î’°’Ω’°’≠', en: 'Kasakh', ru: '–ö–∞—Å–∞—Ö' },
’Ñ’°’µ’°’Ø’∏’æ’Ω’Ø’´: { hy: '’Ñ’°’µ’°’Ø’∏’æ’Ω’Ø’´', en: 'Mayakovski', ru: '–ú–∞—è–∫–æ–≤—Å–∫–∏' },
’Ñ÷Ä’£’°’∑’•’∂: { hy: '’Ñ÷Ä’£’°’∑’•’∂', en: 'Mrgashen', ru: '–ú—Ä–≥–∞—à–µ–Ω' },
'’Ü’∏÷Ä ‘±÷Ä’ø’°’¥’•’ø': { hy: '’Ü’∏÷Ä ‘±÷Ä’ø’°’¥’•’ø', en: 'Nor Artamet', ru: '–ù–æ—Ä –ê—Ä—Ç–∞–º–µ—Ç' },
'’Ü’∏÷Ä ’£’•’≤’´': { hy: '’Ü’∏÷Ä ’£’•’≤’´', en: 'Nor Geghi', ru: '–ù–æ—Ä –ì–µ—Ö–∏' },
'’Ü’∏÷Ä ’£’µ’∏÷Ç’≤': { hy: '’Ü’∏÷Ä ’£’µ’∏÷Ç’≤', en: 'Nor Gyugh', ru: '–ù–æ—Ä –ì—é—Ö' },
'’Ü’∏÷Ä ’Ä’°’≥’®’∂': { hy: '’Ü’∏÷Ä ’Ä’°’≥’®’∂', en: 'Nor Hachn', ru: '–ù–æ—Ä –•–∞—á–Ω' },
'’Ü’∏÷Ä ’•÷Ä’¶’∂’Ø’°': { hy: '’Ü’∏÷Ä ’•÷Ä’¶’∂’Ø’°', en: 'Nor Yerznka', ru: '–ù–æ—Ä –ï—Ä–∑–Ω–∫–∞' },
’Ü’∏÷Ç’º’∂’∏÷Ç’Ω: { hy: '’Ü’∏÷Ç’º’∂’∏÷Ç’Ω', en: 'Nurnus', ru: '–ù—É—Ä–Ω—É—Å' },
’ä’ø’≤’∂’´: { hy: '’ä’ø’≤’∂’´', en: 'Ptghni', ru: '–ü—Ç–≥—Ö–Ω–∏' },
’ç’∏’¨’°’Ø: { hy: '’ç’∏’¨’°’Ø', en: 'Solak', ru: '–°–æ–ª–∞–∫' },
'’é’•÷Ä’´’∂ ’ä’ø’≤’∂’´': { hy: '’é’•÷Ä’´’∂ ’ä’ø’≤’∂’´', en: 'Verin Ptghni', ru: '–í–µ—Ä–∏–Ω –ü—Ç–≥—Ö–Ω–∏' },
‘µ’≤’æ’°÷Ä’§: { hy: '‘µ’≤’æ’°÷Ä’§', en: 'Yegvard', ru: '–ï–≥–≤–∞—Ä–¥' },
‘∂’∏÷Ä’°’æ’°’∂: { hy: '‘∂’∏÷Ä’°’æ’°’∂', en: 'Zoravan', ru: '–ó–æ—Ä–∞–≤–∞–Ω' },
‘∂’∏’æ÷Ñ: { hy: '‘∂’∏’æ÷Ñ', en: 'Zovk', ru: '–ó–æ–≤–∫' },
’Å’∏’æ’∏÷Ç’∂’´: { hy: '’Å’∏’æ’∏÷Ç’∂’´', en: 'Dzovuni', ru: '–î–∑–æ–≤—É–Ω–∏' },
‘±’¶’°’æ’∂’°’±’∏÷Ä: { hy: '‘±’¶’°’æ’∂’°’±’∏÷Ä', en: 'Azavnadzor', ru: '–ê–∑–∞–≤–Ω–∞–¥–∑–æ—Ä' },
‘±÷Ä’ø’°’æ’°’¶: { hy: '‘±÷Ä’ø’°’æ’°’¶', en: 'Artavaz', ru: '–ê—Ä—Ç–∞–≤–∞–∑' },
‘≤’∏÷Ç’™’°’Ø’°’∂: { hy: '‘≤’∏÷Ç’™’°’Ø’°’∂', en: 'Buzhakan', ru: '–ë—É–∂–∞–∫–∞–Ω' },
’ñ’°’∂’ø’°’∂: { hy: '’ñ’°’∂’ø’°’∂', en: 'Fantan', ru: '–§–∞–Ω—Ç–∞–Ω' },
‘≥’•’≤’°’§’´÷Ä: { hy: '‘≥’•’≤’°’§’´÷Ä', en: 'Gekhadir', ru: '–ì–µ—Ö–∞–¥–∏—Ä' },
‘≥’•’≤’°’∑’•’∂: { hy: '‘≥’•’≤’°’∑’•’∂', en: 'Gekhashen', ru: '–ì–µ—Ö–∞—à–µ–Ω' },
‘≥’•’ø’°÷Ä’£’•’¨: { hy: '‘≥’•’ø’°÷Ä’£’•’¨', en: 'Getargel', ru: '–ì–µ—Ç–∞—Ä–≥–µ–ª' },
‘≥’∏’º’£’∏’π: { hy: '‘≥’∏’º’£’∏’π', en: 'Gorgoch', ru: '–ì–æ—Ä–≥–æ—á' },
’Ä’°’∂÷Ñ’°’æ’°’∂: { hy: '’Ä’°’∂÷Ñ’°’æ’°’∂', en: 'Hankavan', ru: '–•–∞–Ω–∫–∞–≤–∞–Ω' },
’ã÷Ä’°’º’°’ø: { hy: '’ã÷Ä’°’º’°’ø', en: 'Jrarat', ru: '–î–∂—Ä–∞—Ä–∞—Ç' },
’à’≤’ª’°’¢’•÷Ä’§: { hy: '’à’≤’ª’°’¢’•÷Ä’§', en: 'Voghjaberd', ru: '–í–æ–¥–∂–∞–±–µ—Ä–¥' },
‘∂’°’º: { hy: '‘∂’°’º', en: 'Zar', ru: '–ó–∞—Ä' },
‘ø’°÷Ä’•’∂’´’Ω: { hy: '‘ø’°÷Ä’•’∂’´’Ω', en: 'Karenis', ru: '–ö–∞—Ä–µ–Ω–∏—Å' },
’Ä’°’ø’´’Ω: { hy: '’Ä’°’ø’´’Ω', en: 'Hatis', ru: '–•–∞—Ç–∏—Å' },
‘ø’°’∫’∏÷Ç’ø’°’∂: { hy: '‘ø’°’∫’∏÷Ç’ø’°’∂', en: 'Kaputan', ru: '–ö–∞–ø—É—Ç–∞–Ω' },
‘ø’°’©’∂’°’≤’¢’µ’∏÷Ç÷Ä: { hy: '‘ø’°’©’∂’°’≤’¢’µ’∏÷Ç÷Ä', en: 'Katnaghbyur', ru: '–ö–∞—Ç–Ω–∞–≥–±—é—Ä' },
’Ñ’°÷Ä’¥’°÷Ä’´’Ø: { hy: '’Ñ’°÷Ä’¥’°÷Ä’´’Ø', en: 'Marmarik', ru: '–ú–∞—Ä–º–∞—Ä–∏–∫' },
’Ñ’•’≤÷Ä’°’±’∏÷Ä: { hy: '’Ñ’•’≤÷Ä’°’±’∏÷Ä', en: 'Meghradzor', ru: '–ú–µ–≥—Ä–∞–¥–∑–æ—Ä' },
‘º’•’º’∂’°’∂’´’Ω’ø: { hy: '‘º’•’º’∂’°’∂’´’Ω’ø', en: 'Lernanist', ru: '–õ–µ—Ä–Ω–∞–Ω–∏—Å—Ç' },
‘∂’∏’æ’°’∑’•’∂: { hy: '‘∂’∏’æ’°’∑’•’∂', en: 'Zovashen', ru: '–ó–æ–≤–∞—à–µ–Ω' },
’ç’°÷Ä’°’¨’°’∂’ª: { hy: '’ç’°÷Ä’°’¨’°’∂’ª', en: 'Saralanj', ru: '–°–∞—Ä–∞–ª–∞–Ω–∂' },
’ç÷á’°’¢’•÷Ä’§: { hy: '’ç÷á’°’¢’•÷Ä’§', en: 'Sevaberd', ru: '–°–µ–≤–∞–±–µ—Ä–¥' },
‘π’•’≤’•’∂’´÷Ñ: { hy: '‘π’•’≤’•’∂’´÷Ñ', en: 'Teghenik', ru: '–¢–µ–≥–µ–Ω–∏–∫' },
’î’°’≤’Ω’´: { hy: '’î’°’≤’Ω’´', en: 'Kaghsi', ru: '–ö–∞–≥—Ö—Å–∏' },
’Ä’°÷Å’°’æ’°’∂: { hy: '’Ä’°÷Å’°’æ’°’∂', en: 'Hasavan', ru: '–•–∞—Å–∞–≤–∞–Ω' },
’ì’µ’∏÷Ç’∂’´’Ø: { hy: '’ì’µ’∏÷Ç’∂’´’Ø', en: 'Pyunik', ru: '–ü—é–Ω–∏–∫' },
’ã÷Ä’°’¢’•÷Ä: { hy: '’ã÷Ä’°’¢’•÷Ä', en: 'Jraber', ru: '–î–∂—Ä–∞–±–µ—Ä' },

	}

	return cityTranslations[cityName]?.[language] || cityName
}

export function getTranslatedStateName(
	stateName: string,
	language: 'hy' | 'en' | 'ru'
): string {
	const stateTranslations: Record<string, Record<string, string>> = {
		‘±÷Ä’°’£’°’Æ’∏’ø’∂: { hy: '‘±÷Ä’°’£’°’Æ’∏’ø’∂', en: 'Aragatsotn', ru: '–ê—Ä–∞–≥–∞—Ü–æ—Ç–Ω' },
		‘±÷Ä’°÷Ä’°’ø: { hy: '‘±÷Ä’°÷Ä’°’ø', en: 'Ararat', ru: '–ê—Ä–∞—Ä–∞—Ç' },
		‘±÷Ä’¥’°’æ’´÷Ä: { hy: '‘±÷Ä’¥’°’æ’´÷Ä', en: 'Armavir', ru: '–ê—Ä–º–∞–≤–∏—Ä' },
		‘≥’•’≤’°÷Ä÷Ñ’∏÷Ç’∂’´÷Ñ: { hy: '‘≥’•’≤’°÷Ä÷Ñ’∏÷Ç’∂’´÷Ñ', en: 'Gegharkunik', ru: '–ì–µ–≥–∞—Ä–∫—É–Ω–∏–∫' },
		‘ø’∏’ø’°’µ÷Ñ: { hy: '‘ø’∏’ø’°’µ÷Ñ', en: 'Kotayk', ru: '–ö–æ—Ç–∞–π–∫' },
		‘º’∏’º’´: { hy: '‘º’∏’º’´', en: 'Lori', ru: '–õ–æ—Ä–∏' },
		’á’´÷Ä’°’Ø: { hy: '’á’´÷Ä’°’Ø', en: 'Shirak', ru: '–®–∏—Ä–∞–∫' },
		’ç’µ’∏÷Ç’∂’´÷Ñ: { hy: '’ç’µ’∏÷Ç’∂’´÷Ñ', en: 'Syunik', ru: '–°—é–Ω–∏–∫' },
		’è’°’æ’∏÷Ç’∑: { hy: '’è’°’æ’∏÷Ç’∑', en: 'Tavush', ru: '–¢–∞–≤—É—à' },
		'’é’°’µ’∏÷Å ’Å’∏÷Ä': { hy: '’é’°’µ’∏÷Å ’Å’∏÷Ä', en: 'Vayots Dzor', ru: '–í–∞–π–æ—Ü –î–∑–æ—Ä' },
		‘µ÷Ä÷á’°’∂: { hy: '‘µ÷Ä÷á’°’∂', en: 'Yerevan', ru: '–ï—Ä–µ–≤–∞–Ω' },

		// English variations for compatibility
		Aragatsotn: { hy: '‘±÷Ä’°’£’°’Æ’∏’ø’∂', en: 'Aragatsotn', ru: '–ê—Ä–∞–≥–∞—Ü–æ—Ç–Ω' },
		Ararat: { hy: '‘±÷Ä’°÷Ä’°’ø', en: 'Ararat', ru: '–ê—Ä–∞—Ä–∞—Ç' },
		Armavir: { hy: '‘±÷Ä’¥’°’æ’´÷Ä', en: 'Armavir', ru: '–ê—Ä–º–∞–≤–∏—Ä' },
		Gegharkunik: { hy: '‘≥’•’≤’°÷Ä÷Ñ’∏÷Ç’∂’´÷Ñ', en: 'Gegharkunik', ru: '–ì–µ–≥–∞—Ä–∫—É–Ω–∏–∫' },
		Kotayk: { hy: '‘ø’∏’ø’°’µ÷Ñ', en: 'Kotayk', ru: '–ö–æ—Ç–∞–π–∫' },
		Lori: { hy: '‘º’∏’º’´', en: 'Lori', ru: '–õ–æ—Ä–∏' },
		Shirak: { hy: '’á’´÷Ä’°’Ø', en: 'Shirak', ru: '–®–∏—Ä–∞–∫' },
		Syunik: { hy: '’ç’µ’∏÷Ç’∂’´÷Ñ', en: 'Syunik', ru: '–°—é–Ω–∏–∫' },
		Tavush: { hy: '’è’°’æ’∏÷Ç’∑', en: 'Tavush', ru: '–¢–∞–≤—É—à' },
		'Vayots Dzor': { hy: '’é’°’µ’∏÷Å ’Å’∏÷Ä', en: 'Vayots Dzor', ru: '–í–∞–π–æ—Ü –î–∑–æ—Ä' },
		Yerevan: { hy: '‘µ÷Ä÷á’°’∂', en: 'Yerevan', ru: '–ï—Ä–µ–≤–∞–Ω' },
	}

	return stateTranslations[stateName]?.[language] || stateName
}

export function getTranslatedField(
	obj: Record<string, string | undefined>,
	fieldName: string,
	language: 'hy' | 'en' | 'ru' = 'hy'
): string {
	if (!obj) return ''

	// Check for translated fields first
	const translatedFieldName = `${fieldName}_${language}`
	if (obj[translatedFieldName]) {
		return obj[translatedFieldName]
	}

	// For Armenian, check if there's a specific Armenian field
	if (language === 'hy') {
		const armenianFieldName = `${fieldName}_hy`
		if (obj[armenianFieldName]) {
			return obj[armenianFieldName]
		}
	}

	// Fall back to original field
	return obj[fieldName] || ''
}

// Export helper to check if translation exists
export function hasTranslation(
	obj: Record<string, string | undefined>,
	fieldName: string,
	language: 'hy' | 'en' | 'ru'
): boolean {
	if (!obj) return false

	if (language === 'hy') {
		return !!obj[fieldName]
	}

	const translatedFieldName = `${fieldName}_${language}`
	return !!obj[translatedFieldName]
}
